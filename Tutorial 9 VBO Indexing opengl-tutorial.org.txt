第九课：VBO索引
索引之原理
目前为止，建立VBO时，我们总是重复存储一些共用的顶点和边。

本课将介绍索引。索引使得我们能够重复使用一个顶点。这是借助索引缓冲区（index buffer）实现的。

索引缓冲区存储的是整数，模型中每个三角形由三个整数表示，分别指向各种属性缓冲区（attribute buffer）（顶点坐标、颜色、UV坐标、其他UV坐标、法向等等）。这有点像OBJ文件格式，但有一点相差甚远：有且仅有一个索引缓冲区。这意味着若两个三角形共用一个顶点，，那这个顶点的所有属性对两个三角形来说都是一样的。

共享vs分开
来看看法向的例子。下图中，美工创建了两个三角形，试图模拟一个平滑曲面。可以把两个三角形的法向混合成一个顶点的法向。为便于演示，我画了一条红线表示平滑曲面。

结果在第二幅图中，美工想要画一条“缝隙”或是“边缘”。但如果混合了法向，就意味着着色器得按步就班地做平滑插值，像前面一样生成一个平滑的表面：

因此，本例中，把顶点的法向分开存储反而更好。在OpenGL中不得不传送两份一模一样的顶点及其属性。

OpenGL中的索引VBO
索引的使用方法很简单。首先需要再创建一个缓冲区存放索引。代码与之前一样，不过参数是ELEMENT_ARRAY_BUFFER，而非ARRAY_BUFFER。

只需把glDrawArrays替换为如下语句即可绘制模型：

（小提示：最好使用unsigned short，不要用unsigned int。这样更节省空间，速度也更快。）

填充索引缓冲区
现在遇到真正的问题了。如前所述，OpenGL只能使用一个索引缓冲区，而OBJ（以及其他一些常用的3D格式，比如Collada）索引缓冲区存储的是属性。这意味着必须通过某种方式把若干个索引缓冲区合并成一个。

算法步骤如下：

完整的C++代码位于common/vboindexer.cpp。注释很详尽，如果理解了上述算法，读懂代码应该没问题。

若两顶点的坐标、UV坐标和法向都相等，则认为两顶点是同一顶点。若还有其他属性，这一标准得酌情修改。

为了简化问题，我们采用了蹩脚的线性搜索来寻找相似的顶点。实际中用std::map来实现更合适一些。

补充：FPS计数器
此内容与索引并无直接关联，但这不失为研究一下FPS计数器的良机，这样我们就能看到索引究竟提升了多少性能。“工具——调试器”中还介绍了其他的性能调优工具。


